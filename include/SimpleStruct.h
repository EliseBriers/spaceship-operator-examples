#ifndef SIMPLE_STRUCT_H
#define SIMPLE_STRUCT_H
#include <compare>

namespace simple_struct_old {
struct SimpleStruct {
    int value;
};

bool operator==(const SimpleStruct& lhs, const SimpleStruct& rhs);
// Since C++20, operator != can be generated by the compiler if operator == exists.

bool operator<(const SimpleStruct& lhs, const SimpleStruct& rhs);
bool operator>(const SimpleStruct& lhs, const SimpleStruct& rhs);

bool operator<=(const SimpleStruct& lhs, const SimpleStruct& rhs);
bool operator>=(const SimpleStruct& lhs, const SimpleStruct& rhs);
}

namespace simple_struct_new {
struct SimpleStruct {
    int value;
};

std::strong_ordering operator<=>(const SimpleStruct& lhs, const SimpleStruct& rhs);
bool operator==(const SimpleStruct& lhs, const SimpleStruct& rhs);
}
#endif
